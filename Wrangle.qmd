---
title: "Exercise: Explore, Clean, and Wrangle Data”"
author: "Karrin"
format: html
---

## About the data

SBC LTER: Reef: Abundance, size and fishing effort for California Spiny Lobster (Panulirus interruptus), ongoing since 2012.  Data on abundance, size and fishing pressure of California spiny lobster (Panulirus interruptus) are collected along the mainland coast of the Santa Barbara Channel.

## Setup

```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
```


## Read and explore data


```{r}
# Read in data
lobster_abundance <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.77.8&entityid=f32823fba432f58f66c06b589b7efac6")

lobster_traps <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.77.8&entityid=66dd61c75bda17c23a3bce458c56ed84")
```

```{r}
summary(lobster_abundance)
summary(lobster_traps)
```


```{r}
head(lobster_abundance)
head(lobster_traps)
```

```{r}
colnames(lobster_abundance)
colnames(lobster_traps)
```


## Exercise 1

The variable SIZE_MM uses -99999 as the code for missing values (see metadata). This has the potential to cause conflicts with our analyses. Modify the data following these steps:

Verify the SIZE_MM variable contains -99999 values using unique().
Convert every -99999 value to an NA value using mutate() and na_if(). Look up the help page to see how to use na_if().
Check your output data using unique().

```{r}
unique(lobster_abundance$SIZE_MM)
```

```{r}
lobster_abundance <- lobster_abundance %>%   
  mutate(SIZE_MM = na_if(SIZE_MM,-99999.0))
unique(lobster_abundance$SIZE_MM)
```

## Exercise 2 

Filter practice

```{r}
aque_70mm <- lobster_abundance %>% 
    filter(SITE == "AQUE" & SIZE_MM >= 70)
```



## Exercise 3 

```{r}
## Create a vector with unique sites in lobster_abundance
abundance_sites <- unique(lobster_abundance$SITE)

## Filter sites in vector above
traps_subset <- lobster_traps %>% 
    filter(SITE %in% abundance_sites)
```



## Exercise 4 

For each data frame, calculate the total count and total traps by site and year (i.e. total traps for every combination of site and year). Store these summary statistics in separate data frames.

HINT: use group_by() and summarize().

Do you notice anything not right in the outcome data frame? We’ll get to it in exercise 7.


```{r}
total_abundance <- lobster_abundance %>% 
    group_by(SITE, YEAR) %>% 
    summarize(total_lobsters = sum(COUNT, na.rm = T))


total_traps <- traps_subset %>% 
    group_by(SITE, YEAR) %>% 
    summarize(total_traps = sum(TRAPS, na.rm = T))
```


## Exercise 5 

Use one of the join_ functions to get an output data frame with the following columns: SITE, YEAR, total_lobsters, total_traps.

Discuss with your neighbor how the output data frame varies when you do a left_join() or a full_join(). What happens when you do an inner_join()?

```{r}

colnames(total_abundance)
colnames(total_traps)

ljoin <- left_join(total_abundance,total_traps, by = c("SITE", "YEAR"))
head(ljoin)
```

```{r}

colnames(total_abundance)
colnames(total_traps)

fjoin <- full_join(total_abundance,total_traps, by = c("SITE", "YEAR"))
head(fjoin)
```
```{r}
library(arsenal)
comparedf(ljoin,fjoin)
```


## Exercise 6 